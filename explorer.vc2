*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="explorer.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS frmbrowse AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*p: calias
		*p: cbrowsefont
		*p: lbrowsereadonly
		*p: ndatasession
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	AllowOutput = .F.
	calias = 
	Caption = "Form1"
	cbrowsefont = 
	DataSession = 2
	DoCreate = .T.
	Height = 250
	lbrowsereadonly = .F.
	Left = 0
	Name = "frmbrowse"
	ndatasession = 0
	Top = 0
	Visible = .T.
	Width = 375
	WindowState = 1
	WindowType = 1
	_memberdata = <VFPData>
		<memberdata name="ndatasession" display="nDataSession"/>
		<memberdata name="calias" display="cAlias"/>
		<memberdata name="lbrowsereadonly" display="lBrowseReadOnly"/>
		<memberdata name="cbrowsefont" display="cBrowseFont"/>
		</VFPData>		&& XML Metadata for customizable properties
	
	PROCEDURE GotFocus
		This.Hide()
		
	ENDPROC

	PROCEDURE Load
		Set Talk Off
	ENDPROC

	PROCEDURE Show
		Lparameters nStyle
		
		Local lcFont, lcReadOnly, llHideScreen, lnSelect
		
		Set DataSession To (This.nDataSession)
		
		If Used(This.cAlias)
			lnSelect = Select()
			Select(This.cAlias)
		
			If _Screen.Visible = .F.
				llHideScreen	= .T.
				_Screen.Visible	= .T.
			Endif
		
			If Empty(This.cBrowseFont)
				lcFont = ''
			Else
				lcFont = 'Font ' + This.cBrowseFont
			Endif
		
			If This.lBrowseReadOnly
				lcReadOnly = 'NOEDIT NOAPPEND NODELETE'
			Else
				lcReadOnly = ''
			Endif
		
			Browse Normal &lcFont &lcReadOnly
		
			If m.llHideScreen
				_Screen.Visible = .F.
			Endif
		
			Select(m.lnSelect)
		
		Else
		
			Messagebox('Not open', 16)
		
		Endif
		
		
	ENDPROC

ENDDEFINE

DEFINE CLASS frmexplorer AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Treecontainer" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdExit" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: getsavedproperty
		*m: navigatetoobject
		*m: opensettingsfile
		*m: readsavedsettings
		*m: resizecontrols
		*m: saveproperty
		*m: savesettings
		*m: setdatasession
		*p: cformname
		*p: csettingsfilename
		*p: nmaxtreeviewwidth
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	AllowOutput = .F.
	Caption = "Explorer"
	cformname = 
	csettingsfilename = (Addbs(Sys(2023)) + 'ExplorerSettings.dbf')
	DataSession = 2
	DoCreate = .T.
	Height = 623
	KeyPreview = .T.
	Left = 0
	Name = "frmexplorer"
	nmaxtreeviewwidth = 400
	ShowWindow = 2
	Top = 0
	Visible = .T.
	Width = 623
	_memberdata = <VFPData>
		<memberdata name="navigatetoobject" display="NavigateToObject"/>
		<memberdata name="getsavedproperty" display="GetSavedProperty"/>
		<memberdata name="opensettingsfile" display="OpenSettingsFile"/>
		<memberdata name="readsavedsettings" display="ReadSavedSettings"/>
		<memberdata name="resizecontrols" display="ResizeControls"/>
		<memberdata name="saveproperty" display="SaveProperty"/>
		<memberdata name="savesettings" display="SaveSettings"/>
		<memberdata name="setdatasession" display="SetDataSession"/>
		<memberdata name="csettingsfilename" display="cSettingsFileName" favorites="True"/>
		<memberdata name="nmaxtreeviewwidth" display="nMaxTreeViewWidth" favorites="True"/>
		<memberdata name="cformname" display="cFormName"/>
		</VFPData>		&& XML Metadata for customizable properties

	ADD OBJECT 'cmdExit' AS commandbutton WITH ;
		Anchor = 0, ;
		AutoSize = .F., ;
		Cancel = .T., ;
		Caption = "Exit", ;
		Height = 27, ;
		Left = 108, ;
		Name = "cmdExit", ;
		ToolTipText = "Save the current list of fields selection from this table (for use next time).", ;
		Top = 546, ;
		Visible = .F., ;
		Width = 66
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Treecontainer' AS treecontainer WITH ;
		Name = "Treecontainer", ;
		Top = 0, ;
		oleTree.Height = 586, ;
		oleTree.Left = 8, ;
		oleTree.Name = "oleTree", ;
		oleTree.Top = 8, ;
		oleTree.Width = 199, ;
		txtFullPath.Name = "txtFullPath", ;
		oPropGrid.Name = "oPropGrid", ;
		Label1.Name = "Label1", ;
		cntCheckBoxes.chklShowCustom.Alignment = 0, ;
		cntCheckBoxes.chklShowCustom.Name = "chklShowCustom", ;
		cntCheckBoxes.chklShowInherited.Alignment = 0, ;
		cntCheckBoxes.chklShowInherited.Name = "chklShowInherited", ;
		cntCheckBoxes.chklShowNative.Alignment = 0, ;
		cntCheckBoxes.chklShowNative.Name = "chklShowNative", ;
		cntCheckBoxes.chklShowNonDefault.Alignment = 0, ;
		cntCheckBoxes.chklShowNonDefault.Name = "chklShowNonDefault", ;
		cntCheckBoxes.chklSortFavorites.Alignment = 0, ;
		cntCheckBoxes.chklSortFavorites.Name = "chklSortFavorites", ;
		cntCheckBoxes.lblFilter.Name = "lblFilter", ;
		cntCheckBoxes.Name = "cntCheckBoxes", ;
		cntCheckBoxes.txtFilter.Name = "txtFilter", ;
		cmdBrowse.Name = "cmdBrowse"
		*< END OBJECT: ClassLib="explorer.vcx" BaseClass="container" />
	
	PROCEDURE Destroy
		This.SaveSettings()
		
	ENDPROC

	PROCEDURE getsavedproperty
		Lparameters lcProperty, lxDefault
		
		If Seek(Upper(m.lcProperty), 'SettingsFile')
			Do Case
				Case Vartype(m.lxDefault) = 'N'
					Return SettingsFile.NumValue
				Case Vartype(m.lxDefault) = 'L'
					Return SettingsFile.BitValue
				Otherwise
					Return .Null.
			Endcase
		Else
			Return m.lxDefault
		Endif
		
	ENDPROC

	PROCEDURE Init
		Lparameters toObject, tcObjectName, tcFormCaptionSuffix
		
		*** DH 2022-04-03: handle llExplore
		Local lcRelative, llFailed, llHasParent, loException, loNewParent, loParent, llExplore
		
		This.ReadSavedSettings()
		
		loParent = m.toObject
		Do While Pemstatus(m.loParent, 'Parent', 5) And m.llFailed = .F.
			Try
				loNewParent	= m.loParent.Parent
				If Upper(m.loNewParent.Class) # 'FORMSET'
					loParent	= m.loNewParent
					llHasParent	= .T.
				Else
					llFailed = .T.
				Endif
			Catch
				llFailed = .T.
			Endtry
		Enddo
		
		If m.llHasParent
		*** DH 2022-04-03: get return value from Explore method
			llExplore = This.Treecontainer.Explore(m.loParent, m.tcObjectName)
			This.NavigateToObject(m.toObject)
		Else
		*** DH 2022-04-03: get return value from Explore method
			llExplore = This.Treecontainer.Explore(m.toObject, m.tcObjectName)
		Endif
		*** DH 2022-04-03: check for Explorer failing
		if not llExplore
			return .F.
		endif not llExplore
		*** DH 2022-04-03: end of new code
		
		If Not Empty(m.tcFormCaptionSuffix)
			This.Caption = This.Caption + ': ' + m.tcFormCaptionSuffix
		Else
			Try
				This.cFormName = Sys(1271, m.loParent)
				lcRelative	   = Sys(2014, This.cFormName)
				This.Caption   = This.Caption + ': "' + m.lcRelative + '" (' + m.loParent.Caption + ')'
			Catch To m.loException
				This.Caption = This.Caption + ': ' + This.Treecontainer.oleTree.Nodes[1].Text
		
			Endtry
		Endif
		
		This.ReadSavedSettings() && yup, again! .. don't ask
		
		This.ResizeControls()
		
		External Class Explorer.Vcx
	ENDPROC

	PROCEDURE KeyPress
		Lparameters nKeyCode, nShiftAltCtrl
		Do Case
			Case m.nKeyCode = 27
				This.Release()
		Endcase
		
	ENDPROC

	PROCEDURE Load
		Set Talk Off
		
	ENDPROC

	PROCEDURE navigatetoobject
		Lparameters toObject
		
		This.Treecontainer.NavigateToObject(toObject)
	ENDPROC

	PROCEDURE opensettingsfile
		Local laTagIngo[1], lcFileName, loException
		lcFileName = This.cSettingsFileName
		
		Select 0
		If Not File(m.lcFileName)
			Create Table (m.lcFileName)  (Property C(40), NumValue N(10), BitValue L)
			Index On Upper(Property) Tag Property
		Endif
		
		Try
			Use (m.lcFileName) Alias SettingsFile Again Shared Order Property
		Catch To m.loException
			Use (m.lcFileName) Exclusive
			Index On Upper(Property) Tag Property
			Use (m.lcFileName) Alias SettingsFile Again Shared Order Property
		Endtry
		
	ENDPROC

	PROCEDURE readsavedsettings
		With This
			.OpenSettingsFile()
		
			.Top	= .GetSavedProperty('Top', 	  .Top)
			.Left	= .GetSavedProperty('Left',   .Left)
			.Width	= .GetSavedProperty('Width',  .Width)
			.Height	= .GetSavedProperty('Height', .Height)
		
		*** DH 2022-03-03: ensure the form is visible
			local lnBottom, ;
				lnRight
			lnBottom = .Top  + .Height
			lnRight  = .Left + .Width
			do case
				case .ShowWindow = 2 or .Desktop
				case .ShowWindow = 0 and (not between(lnBottom, .Height, _screen.Height) or ;
					not between(lnRight, .Width, _screen.Width))
					store 0 to .Top, .Left
				case .ShowWindow = 1 and (type('_screen.ActiveForm') = 'O' and ;
					(not between(lnBottom, .Height, _screen.ActiveForm.Height) or ;
					not between(lnRight, .Width, _screen.ActiveForm.Width)) or ;
					not between(lnBottom, .Height, _screen.Height) or ;
					not between(lnRight, .Width, _screen.Width))
					store 0 to .Top, .Left
			endcase
		*** DH 2022-03-03: end of new code
		
			.Treecontainer.lShowNative	   = .GetSavedProperty('ShowNative',     .T.)
			.Treecontainer.lShowInherited  = .GetSavedProperty('ShowInherited',  .T.)
			.Treecontainer.lShowCustom	   = .GetSavedProperty('ShowCustom',     .T.)
			.Treecontainer.lShowNonDefault = .GetSavedProperty('ShowNonDefault', .F.)
			.Treecontainer.lSortFavorites  = .GetSavedProperty('SortFavorites',  .F.)
			.Treecontainer.nMaxCharacterWidth  = .GetSavedProperty('MaxCharacterWidth',  00)
			
			.TreeContainer.opropGrid.Column1.Width = .GetSavedProperty('Column1.Width', 150)
			.TreeContainer.opropGrid.Column2.Width = .GetSavedProperty('Column2.Width', 32)
			.TreeContainer.opropGrid.Column3.Width = .GetSavedProperty('Column3.Width', 500)
		
			Use
		Endwith
		
	ENDPROC

	PROCEDURE Refresh
		This.ResizeControls()
		
	ENDPROC

	PROCEDURE Resize
		This.ResizeControls()
		
	ENDPROC

	PROCEDURE resizecontrols
		Local lnTreeRight, lnTreeWidth, loTreecontainer
		
		lnTreeWidth = Min(Thisform.nMaxTreeViewWidth, This.Width / 3)
		
		If lnTreeWidth # 0
		
			loTreecontainer = This.Treecontainer
			With m.loTreecontainer.oleTree
				.Anchor		= 0
				.Left		= 4
				.Width		= lnTreeWidth 
				.Anchor		= 7
				lnTreeRight	= .Left + .Width
			Endwith
		
			With m.loTreecontainer.oPropGrid
				.Anchor	= 0
				.Left	= m.lnTreeRight + 10
				.Width	= m.loTreecontainer.Width - .Left - 4
				.Anchor	= 15
		
				.Column3.Width = Max(40, .Width - (.Column1.Width + .Column2.Width) - 30)
				.Column4.Width = 0
				
				m.loTreecontainer.nMaxCharacterWidth = (.Column3.Width - 40) / 6.5
				
			Endwith
		
			With m.loTreecontainer.cntCheckBoxes
				.Anchor	= 0
				.Left	= m.loTreecontainer.oPropGrid.Left	
				lnLeft = .Left	
			EndWith
		
			With m.loTreecontainer.txtFullPath
				.Anchor	= 0
				.Left	= m.loTreecontainer.oPropGrid.Left	
				lnLeft = .Left	
				.Anchor = 14
			EndWith
		
		Endif
		
	ENDPROC

	PROCEDURE saveproperty
		Lparameters lcProperty, lxValue
		If Seek(Upper(m.lcProperty), 'SettingsFile')
			Do Case
				Case Vartype(m.lxValue) = 'N'
					Replace NumValue With m.lxValue In SettingsFile
				Case Vartype(m.lxValue) = 'L'
					Replace BitValue With m.lxValue In SettingsFile
			Endcase
		Else
			Do Case
				Case Vartype(m.lxValue) = 'N'
					Insert Into SettingsFile (Property, NumValue) Values (m.lcProperty, m.lxValue)
				Case Vartype(m.lxValue) = 'L'
					Insert Into SettingsFile (Property, BitValue) Values (m.lcProperty, m.lxValue)
			Endcase
		Endif
		
	ENDPROC

	PROCEDURE savesettings
		With This
			.OpenSettingsFile()
			.SaveProperty('Top',    .Top)
			.SaveProperty('Left',   .Left)
			.SaveProperty('Width',  .Width)
			.SaveProperty('Height', .Height)
		
			.SaveProperty('ShowNative',     .Treecontainer.lShowNative)
			.SaveProperty('ShowInherited',  .Treecontainer.lShowInherited)
			.SaveProperty('ShowCustom',     .Treecontainer.lShowCustom)
			.SaveProperty('ShowNonDefault', .Treecontainer.lShowNonDefault)
			.SaveProperty('SortFavorites',  .Treecontainer.lSortFavorites)
			.SaveProperty('MaxCharacterWidth',  .Treecontainer.nMaxCharacterWidth)
		
			.SaveProperty('Column1.Width', .TreeContainer.opropGrid.Column1.Width)
			.SaveProperty('Column2.Width', .TreeContainer.opropGrid.Column2.Width)
			.SaveProperty('Column3.Width', .TreeContainer.opropGrid.Column3.Width)
		
			Use
		Endwith
		
		
	ENDPROC

	PROCEDURE setdatasession
		Lparameters lnDataSession
		Set Datasession to (lnDataSession)
		
	ENDPROC

	PROCEDURE cmdExit.Click
		Thisform.Release()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS inputbox AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Edit2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdSave" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdQuit" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: saveresult
		*p: ccaption
		*p: lcancelled
		*p: xvalue
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	AllowOutput = .F.
	AutoCenter = .T.
	Caption = "Input Box"
	ccaption = Prompt
	DoCreate = .T.
	Height = 100
	lcancelled = .F.
	Name = "inputbox"
	ShowWindow = 0
	Width = 375
	WindowType = 1
	xvalue = 0
	_memberdata = <VFPData>
		<memberdata name="ccaption" display="cCaption"/>
		<memberdata name="xvalue" display="xValue"/>
		<memberdata name="lcancelled" display="lCancelled"/>
		<memberdata name="saveresult" display="SaveResult"/>
		</VFPData>		&& XML Metadata for customizable properties

	ADD OBJECT 'cmdQuit' AS commandbutton WITH ;
		Cancel = .T., ;
		Caption = "Quit", ;
		Height = 27, ;
		Left = 24, ;
		Name = "cmdQuit", ;
		TabIndex = 4, ;
		Top = 66, ;
		Width = 84
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdSave' AS commandbutton WITH ;
		Caption = "Save", ;
		Default = .T., ;
		Height = 27, ;
		Left = 24, ;
		Name = "cmdSave", ;
		TabIndex = 3, ;
		Top = 36, ;
		Width = 84
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Edit2' AS editbox WITH ;
		Anchor = 15, ;
		FontSize = 10, ;
		Height = 84, ;
		Left = 117, ;
		Name = "Edit2", ;
		TabIndex = 2, ;
		Top = 6, ;
		Width = 253
		*< END OBJECT: BaseClass="editbox" />

	ADD OBJECT 'Label1' AS label WITH ;
		Alignment = 1, ;
		Caption = "Prompt:", ;
		FontSize = 10, ;
		Height = 17, ;
		Left = 6, ;
		Name = "Label1", ;
		TabIndex = 5, ;
		Top = 10, ;
		Width = 99
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Text1' AS textbox WITH ;
		Anchor = 10, ;
		FontSize = 10, ;
		Height = 23, ;
		Left = 117, ;
		Name = "Text1", ;
		TabIndex = 1, ;
		Top = 6, ;
		Width = 254
		*< END OBJECT: BaseClass="textbox" />
	
	PROCEDURE saveresult
		Thisform.lCancelled	= .F.
		Thisform.Hide()
		
	ENDPROC

	PROCEDURE cmdQuit.Click
		Thisform.lCancelled = .T.
		Thisform.Release()
		
	ENDPROC

	PROCEDURE cmdQuit.Refresh
		This.Top = -100
	ENDPROC

	PROCEDURE cmdSave.Click
		ThisForm.SaveResult()
		
	ENDPROC

	PROCEDURE cmdSave.Refresh
		This.Top = -100
	ENDPROC

	PROCEDURE Edit2.KeyPress
		Lparameters nKeyCode, nShiftAltCtrl
		
		If m.nKeyCode = 13
			Thisform.xValue = This.Value
			Thisform.SaveResult()
		Endif
		
		
	ENDPROC

	PROCEDURE Edit2.Refresh
		If Vartype(Thisform.xValue) = 'C'
			Create Cursor MemoCursor(MemoField M)
			Insert Into MemoCursor Values (Thisform.xValue)
			This.ControlSource = 'MemoCursor.MemoField'
			Thisform.Width	   = This.Left + 80 + 7 * Max(20, Len(Thisform.xValue))
		Else
			This.Visible = .F.
		Endif
	ENDPROC

	PROCEDURE Label1.Refresh
		This.Caption = Thisform.cCaption
		
	ENDPROC

	PROCEDURE Text1.Refresh
		If Vartype(ThisForm.xValue) # 'C'
			This.ControlSource = 'Thisform.xValue'
			Thisform.Width	   = This.Left + 80 + Iif(Vartype(ThisForm.xValue) = 'T', 80, 0)
			Thisform.Height	   = This.Top + 32
		Else
			This.Visible = .F.
		Endif
	ENDPROC

ENDDEFINE

DEFINE CLASS inputbox_intlf AS inputbox OF "explorer.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	Desktop = .T.
	DoCreate = .T.
	MaxButton = .F.
	MinButton = .F.
	Name = "inputbox_intlf"
	ShowWindow = 1
	Edit2.Name = "Edit2"
	Label1.Name = "Label1"
	Text1.Name = "Text1"
	cmdSave.Name = "cmdSave"
	cmdQuit.Name = "cmdQuit"

ENDDEFINE

DEFINE CLASS inputbox_showwindow1 AS inputbox OF "explorer.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	Desktop = .T.
	DoCreate = .T.
	Name = "inputbox_showwindow1"
	ShowWindow = 1
	Edit2.Name = "Edit2"
	Label1.Name = "Label1"
	Text1.Name = "Text1"
	cmdSave.Name = "cmdSave"
	cmdQuit.Name = "cmdQuit"

ENDDEFINE

DEFINE CLASS treecontainer AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="oleTree" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtFullPath" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oPropGrid" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntCheckBoxes" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntCheckBoxes.chklShowNative" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntCheckBoxes.chklShowInherited" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntCheckBoxes.chklShowCustom" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntCheckBoxes.chklShowNonDefault" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntCheckBoxes.lblFilter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntCheckBoxes.txtFilter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntCheckBoxes.chklSortFavorites" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdBrowse" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: about
		*m: addtoobjectlist
		*m: browse		&& Called to Browse the table identified in the current node; see also BrowseRefresh.
		*m: browsecursor
		*m: cfavorites_access
		*m: closetable
		*m: createcursorforgrid
		*m: dblclickcursor
		*m: explore
		*m: fillgridwitharray
		*m: fillgridwithproperties		&& Displays the properties for the passed node.
		*m: fixcaseofproperty
		*m: getbrowsecursorname		&& Returns the name of the cursor for the Browse button and saves the DataSessionID it is found in.
		*m: getcollectionnodename		&& For items in a collection, returns the caption to be used for nodes in the TreeView
		*m: getnodefor
		*m: getnodetext		&& For objects other than collections, returns the caption to be used for nodes in the TreeView
		*m: getobjectreference		&& Returns the object reference to the item represented by a node.
		*m: getsavedproperty
		*m: haschildobjects
		*m: inputbox
		*m: loadchildobjects		&& Loads the member objects of an object into the tree view.
		*m: loadcollectionitems		&& Loads the items in a collection into the treeview.
		*m: loadobject		&& Loads an object into the TreeView.
		*m: loadotherobjects		&& Loads the properties of an object into the treeview.
		*m: locktreeview
		*m: logchange		&& Hook to allow capture of changes made to properties
		*m: navigatetoobject
		*m: newnode		&& Adds an empty node to the treeview.
		*m: ocurrentnode_access
		*m: onobjectreleased		&& Fired when the object being explored is released
		*m: pemstatusfails
		*m: refreshgrid
		*m: resizecontrols
		*m: saveproperty
		*m: setupgridcolumns
		*m: skippropertyname
		*m: sortnode
		*m: transformcharacter		&& Returns the text for character values that appear in the third column of the grid.
		*m: usekeywordtable
		*m: zapcursor
		*p: cbrowsefont		&& Sets the font to be used when browsing a cursor.
		*p: ccklkeywordcursor
		*p: ccklkeywordtablename		&& Used when Explorer is used and Thor is not in use (presumably, in Production), returns the name of the table used by Thor's Custom Keyword List.
		*p: ccollectionitemprefix		&& Used in Treeview for item names in a collection
		*p: ccursorname
		*p: cdefaultfavorites
		*p: cfavorites
		*p: cfilter
		*p: cmyfavorites		&& My custom list of properties that are Favorites (separated by spaces, commas, or new lines)
		*p: cskippedobjectnames		&& List of object names that I want Explorer to Ignore
		*p: cversion
		*p: cvfpkeywordcursor
		*p: cvfpkeywordtablename		&& Used when Explorer is used and Thor is not in use (presumably, in Production), FoxPro's native table for keyword names
		*p: laligninputboxtocursor
		*p: lbrowsereadonly
		*p: ldblclickreadonly
		*p: lfavoritesbold
		*p: lshowcaption		&& Show Caption in treeview node
		*p: lshowcontrolsource		&& Show ControlSource in treeview node
		*p: lshowcustom		&& Show Custom properties
		*p: lshowinherited		&& Show Inherited properties
		*p: lshowitems		&& Indicates the items in a collection should be displayed in the tree.
		*p: lshowmemberobjects		&& Indicates that member objects should be displayed in the treeview.
		*p: lshownative		&& Show Native properties
		*p: lshownondefault
		*p: lsortfavorites
		*p: lsorttreeviewnodes		&& Sorts TreeView nodes alphabetically
		*p: lwindowlocked
		*p: nbrowsedatasessionid
		*p: nfavoritesbackcolor
		*p: nfontsize
		*p: nmaxcharacterwidth
		*p: ocurrentnode
		*p: ofirstobject		&& Stores an object reference to the top most object in the treeview.
		*p: ofixcase
		*a: aobjectlist[1,0]
		*a: apems[1,0]
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	Anchor = 15
	BorderWidth = 0
	cbrowsefont = 		&& Sets the font to be used when browsing a cursor.
	ccklkeywordcursor = 
	ccklkeywordtablename = (Iif(Type('_Screen.Cthorfolder') = 'C', _screen.Cthorfolder + "tools\my tools\keywordlist.dbf", ''))		&& Used when Explorer is used and Thor is not in use (presumably, in Production), returns the name of the table used by Thor's Custom Keyword List.
	ccollectionitemprefix = Item		&& Used in Treeview for item names in a collection
	ccursorname = 
	cdefaultfavorites = caption, controlsource, recordsource, baseclass, class, classlibrary, parentclass, top, left, width, height, text, value, enabled, visible, rowsource, rowsourcetype, datasessionid
	cfavorites = 
	cfilter = 
	cmyfavorites = 		&& My custom list of properties that are Favorites (separated by spaces, commas, or new lines)
	cskippedobjectnames = 		&& List of object names that I want Explorer to Ignore
	cversion = 3.3.1 - 2022/04/03
	cvfpkeywordcursor = 
	cvfpkeywordtablename = (Home(0) + 'WIZARDS\FDKEYWRD.dbf')		&& Used when Explorer is used and Thor is not in use (presumably, in Production), FoxPro's native table for keyword names
	Height = 623
	laligninputboxtocursor = .F.
	lbrowsereadonly = .F.
	ldblclickreadonly = .F.
	lfavoritesbold = .T.
	lshowcaption = .F.		&& Show Caption in treeview node
	lshowcontrolsource = .F.		&& Show ControlSource in treeview node
	lshowcustom = .T.		&& Show Custom properties
	lshowinherited = .T.		&& Show Inherited properties
	lshowitems = .T.		&& Indicates the items in a collection should be displayed in the tree.
	lshowmemberobjects = .T.		&& Indicates that member objects should be displayed in the treeview.
	lshownative = .T.		&& Show Native properties
	lshownondefault = .F.
	lsortfavorites = .F.
	lsorttreeviewnodes = .T.		&& Sorts TreeView nodes alphabetically
	lwindowlocked = .F.
	Name = "treecontainer"
	nbrowsedatasessionid = 0
	nfavoritesbackcolor = (RGB(255, 255, 128))
	nfontsize = 0
	nmaxcharacterwidth = 200
	ocurrentnode = .NULL.
	ofirstobject = .NULL.		&& Stores an object reference to the top most object in the treeview.
	ofixcase = .NULL.
	Width = 623
	_memberdata = <VFPData>
		<memberdata name="addtoobjectlist" display="AddToObjectList"/>
		<memberdata name="dblclickcursor" display="DblClickCursor"/>
		<memberdata name="fillgridwithproperties" display="FillGridWithProperties"/>
		<memberdata name="getnodefor" display="GetNodeFor"/>
		<memberdata name="getnodetext" display="GetNodeText" favorites="True"/>
		<memberdata name="getobjectreference" display="GetObjectReference"/>
		<memberdata name="getsavedproperty" display="GetSavedProperty"/>
		<memberdata name="haschildobjects" display="HasChildObjects"/>
		<memberdata name="loadchildobjects" display="LoadChildObjects"/>
		<memberdata name="loadcollectionitems" display="LoadCollectionItems"/>
		<memberdata name="loadobject" display="LoadObject"/>
		<memberdata name="loadotherobjects" display="LoadOtherObjects"/>
		<memberdata name="navigatetoobject" display="NavigateToObject"/>
		<memberdata name="newnode" display="NewNode"/>
		<memberdata name="resizecontrols" display="ResizeControls"/>
		<memberdata name="saveproperty" display="SaveProperty"/>
		<memberdata name="transformcharacter" display="TransformCharacter" favorites="True"/>
		<memberdata name="aobjectlist" display="aObjectList"/>
		<memberdata name="ccursorname" display="cCursorName"/>
		<memberdata name="cversion" display="cVersion"/>
		<memberdata name="lshowitems" display="lShowItems"/>
		<memberdata name="lshowmemberobjects" display="lShowMemberObjects"/>
		<memberdata name="lsorttreeviewnodes" display="lSortTreeViewNodes" favorites="True"/>
		<memberdata name="nfontsize" display="nFontSize" favorites="True"/>
		<memberdata name="ocurrentnode" display="oCurrentNode"/>
		<memberdata name="ocurrentnode_access" display="oCurrentNode_Access"/>
		<memberdata name="ofirstobject" display="oFirstObject"/>
		<memberdata name="explore" display="Explore"/>
		<memberdata name="lshowcaption" display="lShowCaption" favorites="True"/>
		<memberdata name="lshowcontrolsource" display="lShowControlSource" favorites="True"/>
		<memberdata name="ccollectionitemprefix" display="cCollectionItemPrefix" favorites="True"/>
		<memberdata name="lshowcustom" display="lShowCustom"/>
		<memberdata name="lshowinherited" display="lShowInherited"/>
		<memberdata name="lshownative" display="lShowNative"/>
		<memberdata name="lshownondefault" display="lShowNonDefault"/>
		<memberdata name="getcollectionnodename" display="GetCollectionNodeName" favorites="True"/>
		<memberdata name="sortnode" display="SortNode"/>
		<memberdata name="about" display="About"/>
		<memberdata name="fixcaseofproperty" display="FixCaseofProperty"/>
		<memberdata name="ofixcase" display="oFixCase"/>
		<memberdata name="locktreeview" display="LockTreeView"/>
		<memberdata name="lwindowlocked" display="lWindowLocked"/>
		<memberdata name="fillgridwitharray" display="FillGridWithArray"/>
		<memberdata name="cskippedobjectnames" display="cSkippedObjectNames" favorites="True"/>
		<memberdata name="createcursorforgrid" display="CreateCursorForGrid"/>
		<memberdata name="setupgridcolumns" display="SetupGridColumns"/>
		<memberdata name="zapcursor" display="ZapCursor"/>
		<memberdata name="refreshgrid" display="RefreshGrid"/>
		<memberdata name="pemstatusfails" display="PemstatusFails"/>
		<memberdata name="cvfpkeywordtablename" display="cVFPKeywordTableName" favorites="True"/>
		<memberdata name="ccklkeywordtablename" display="cCKLKeywordTableName" favorites="True"/>
		<memberdata name="cvfpkeywordcursor" display="cVFPKeywordCursor"/>
		<memberdata name="ccklkeywordcursor" display="cCKLKeywordCursor"/>
		<memberdata name="usekeywordtable" display="UseKeywordTable"/>
		<memberdata name="closetable" display="CloseTable"/>
		<memberdata name="lsortfavorites" display="lSortFavorites"/>
		<memberdata name="lfavoritesbold" display="lFavoritesBold" favorites="True"/>
		<memberdata name="nfavoritesbackcolor" display="nFavoritesBackColor" favorites="True"/>
		<memberdata name="nmaxcharacterwidth" display="nMaxCharacterWidth"/>
		<memberdata name="inputbox" display="InputBox"/>
		<memberdata name="browsecursor" display="BrowseCursor"/>
		<memberdata name="browse" display="Browse"/>
		<memberdata name="ldblclickreadonly" display="lDblClickReadOnly" favorites="True"/>
		<memberdata name="lbrowsereadonly" display="lBrowseReadOnly" favorites="True"/>
		<memberdata name="cbrowsefont" display="cBrowseFont" favorites="True"/>
		<memberdata name="cfilter" display="cFilter"/>
		<memberdata name="width" display="Width"/>
		<memberdata name="skippropertyname" display="SkipPropertyName"/>
		<memberdata name="laligninputboxtocursor" display="lAlignInputBoxToCursor" favorites="True"/>
		<memberdata name="cdefaultfavorites" display="cDefaultFavorites"/>
		<memberdata name="cfavorites" display="cFavorites"/>
		<memberdata name="cfavorites_access" display="cFavorites_Access"/>
		<memberdata name="cmyfavorites" display="cMyFavorites" favorites="True"/>
		<memberdata name="getbrowsecursorname" display="GetBrowseCursorName" favorites="True"/>
		<memberdata name="nbrowsedatasessionid" display="nBrowseDataSessionID"/>
		<memberdata name="logchange" display="LogChange" favorites="True"/>
		<memberdata name="onobjectreleased" display="OnObjectReleased"/>
		</VFPData>		&& XML Metadata for customizable properties

	ADD OBJECT 'cmdBrowse' AS commandbutton WITH ;
		Anchor = 4, ;
		AutoSize = .T., ;
		Caption = "Browse", ;
		Height = 27, ;
		Left = 11, ;
		Name = "cmdBrowse", ;
		Top = 597, ;
		Width = 60
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cntCheckBoxes' AS container WITH ;
		Anchor = 40, ;
		BorderWidth = 0, ;
		Height = 31, ;
		Left = 212, ;
		Name = "cntCheckBoxes", ;
		Top = 5, ;
		Width = 761
		*< END OBJECT: BaseClass="container" />

	ADD OBJECT 'cntCheckBoxes.chklShowCustom' AS checkbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "Custom", ;
		ControlSource = "This.Parent.Parent.lShowCustom", ;
		FontBold = .T., ;
		Height = 17, ;
		Left = 334, ;
		Name = "chklShowCustom", ;
		Top = 8, ;
		Width = 62
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cntCheckBoxes.chklShowInherited' AS checkbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "Inherited", ;
		ControlSource = "This.Parent.Parent.lShowInherited", ;
		FontBold = .T., ;
		Height = 17, ;
		Left = 249, ;
		Name = "chklShowInherited", ;
		Top = 8, ;
		Width = 68
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cntCheckBoxes.chklShowNative' AS checkbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "Native", ;
		ControlSource = "This.Parent.Parent.lShowNative", ;
		FontBold = .T., ;
		Height = 17, ;
		Left = 179, ;
		Name = "chklShowNative", ;
		Top = 8, ;
		Width = 53
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cntCheckBoxes.chklShowNonDefault' AS checkbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "Non-Default", ;
		ControlSource = "This.Parent.Parent.lShowNonDefault", ;
		FontBold = .T., ;
		Height = 17, ;
		Left = 413, ;
		Name = "chklShowNonDefault", ;
		Top = 8, ;
		Width = 84
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cntCheckBoxes.chklSortFavorites' AS checkbox WITH ;
		Alignment = 0, ;
		Anchor = 4, ;
		AutoSize = .T., ;
		Caption = "Favorites on top", ;
		ControlSource = "This.Parent.Parent.lSortFavorites", ;
		FontBold = .T., ;
		Height = 17, ;
		Left = 514, ;
		Name = "chklSortFavorites", ;
		Top = 8, ;
		Width = 108
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cntCheckBoxes.lblFilter' AS label WITH ;
		Alignment = 2, ;
		AutoSize = .T., ;
		Caption = "Filter:", ;
		FontBold = .T., ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 8, ;
		Name = "lblFilter", ;
		Top = 9, ;
		Width = 33
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'cntCheckBoxes.txtFilter' AS textbox WITH ;
		ControlSource = "This.Parent.Parent.cFilter", ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .T., ;
		Format = "!", ;
		Height = 23, ;
		Left = 46, ;
		Name = "txtFilter", ;
		NullDisplay = "", ;
		Top = 5, ;
		Width = 109
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'Label1' AS label WITH ;
		Alignment = 2, ;
		Anchor = 12, ;
		AutoSize = .F., ;
		Caption = "Ver X.X.X", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 493, ;
		Name = "Label1", ;
		Top = 604, ;
		Width = 123
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'oleTree' AS olecontrol WITH ;
		Anchor = 135, ;
		Height = 586, ;
		Left = 8, ;
		Name = "oleTree", ;
		Top = 8, ;
		Width = 199
		*< END OBJECT: BaseClass="olecontrol" OLEObject="c:\windows\syswow64\mscomctl.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgv////7///8EAAAA/v///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////1IAbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHDPe59lR9gBAwAAAIACAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAagAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAFcBAAAAAAAABAAAAAIAAAD+////BQAAAP7///8GAAAABwAAAAgAAAAJAAAA/vkEHHiYXREbFqAMDwKDYoIUM0EggAAACRFAAAkTwAALE8wWoBAAYAIgAAAHkATQDcAQAASgBvAAEAAAAB782rXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5MzY4MjY1RS04NUZFLTExZDEtOEJFMy0wMDAwRjg3NTREQTF5AHMAdABlAG0AMwAyAFwAaQBuAGUAdABzAHIAdgBcAGMAbgABAACADgAAAEhpZGVTZWxlY3Rpb24ABQAAAEwAAAAADAAAAEluZGVudGF0aW9uABEAAABODQAAAAcAAAAAAAAAAAAFAPDS9gACAGUAAAAAAAUAAIBA6RkAAQAAAFwAH97svQEABQCI6RkARgBCADYANgA3ADgAQgB9ACAAQwA6AAAAMkAKAAAATGFiZWxFZGl0AAkAAABJCgAAAAEAAAAKAAAATGluZVN0eWxlAAkAAABJCgAAAAEAAAANAAAATW91c2VQb2ludGVyAAkAAABJCgAAAAAAAAAOAAAAUGF0aFNlcGFyYXRvcgAKAAAASAAAAAABAAAAXAYAAABTdHlsZQAJAAAASQoAAAAGAAAADAAAAE9MRURyYWdNb2RlAAkAAABJCgAAAAAAAAAMAAAAT0xFRHJvcE1vZGUACQAAAEkKAAAAAAAAAAsAAABBcHBlYXJhbmNlAAkAAABJCgAAAAAAAAAOAAAARnVsbFJvd1NlbGVjdAAFAAAATAEAAAAKAAAAU2luZ2xlU2VsAAUAAABMAAAAAH//f/9//38AAAAAAAAYIB4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAkAkQEPAFdIQVRTVEhJU0hFTFBJRABwBRYAcAUWAC4AVgGVAQgAwCFYJ/whHgBIIh4AcCxYJwAAAAABAAAAAABzACg0WCcYNFgn+DNYJ7gjHgAYIB4AAAAAAG4AcwAAAGUAYwB0AG8AcgAuAHMAAAAAADYAAADQ2x0AlNwdAFAWXCdAFlwnAAAAAADAWEQAAABAaQBvAAAAcwBcAGMAbwBsAGwAZQAAAHQAaQBvAG4AaQBuAHMAwCFYJ4wiHgDYIh4AcCxYJwEAAAAeAAAAAAAAACg0WCcYNFgn+DNYJwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADQ2x0AAAAAAFgYXCdIGFwnAAAAAAAAAAAAAAAAAAAAAP////8AAAAAAAAAAAAAAADAIVgnDCMeAEgjHgBwLFgnAQAAAB8AAAAAAAAAQCJYJyAiWCcAAAAAAAAAAAAAAAAAAAAAAAAAAEgiHgAAAAAA" />

	ADD OBJECT 'oPropGrid' AS grid WITH ;
		Anchor = 45, ;
		FontSize = 8, ;
		GridLineColor = 192,192,192, ;
		Height = 558, ;
		Left = 212, ;
		Name = "oPropGrid", ;
		ReadOnly = .T., ;
		RecordMark = .F., ;
		RecordSource = (""), ;
		RowHeight = 17, ;
		Top = 38, ;
		Width = 407
		*< END OBJECT: BaseClass="grid" />

	ADD OBJECT 'txtFullPath' AS textbox WITH ;
		Anchor = 14, ;
		DisabledForeColor = 0,0,0, ;
		Enabled = .F., ;
		Height = 23, ;
		Left = 180, ;
		Name = "txtFullPath", ;
		NullDisplay = "", ;
		Top = 599, ;
		Width = 437
		*< END OBJECT: BaseClass="textbox" />
	
	PROCEDURE about
		Text
		
		
		This tool was originally released by Mike Feltman at Southwest Fox 2008 under the name "Collection Explorer".
		
		See this blog post for a writeup about this tool, and other similar tools that do object display UI:
			http://mattslay.com/object-inspectors-and-explorers-for-foxpro/																								
		
		This tool was updated by Matt Slay in November 2017, and renamed as "Object Explorer". I renamed it
		because it handles more then just Collections, it also does a great job at displaying Object properties as well
		and, after all, Collections are Objects too.
		
		It also handles nested objects.
		
		*-------------------------------------------------------------------------------------------------------------
		Change log 
		
		2017-11-17	Ver 2.0.0 
					Renamed to "Object Explorer" 
					Removed OLE Control which was used to display property names and values, and replaced 
					it with a grid. This allows values (as text) to be selected from the grid, whereas the OLE 
					control did not allow cell selection for some reason. 
					
		
		2017-11-18  Ver 2.1.0 
					Added Double-Click feature to the properties grid so that if the Value field of the current row
					(i.e. the property value) is the name of a cursor that is open in the current data session
					then it will do a Browse on the cursor to show all the rows in that cursor 
		
					Added new form property "lSortTreeViewNodes" to control if nodes in treeview control will be sorted
					into alphabetcal order. If not, the nodes in the treeview appear in the natural order in which
					the child objects were originally created on the parent object. Default is .t.			
					
					
		2017-11-20  Ver 2.2.0 / JRN
					Tinkered with #include file FoxPro.h (not in my path, so may still need correction to work for others).
					
					Modified this method to use Text/EndText to simplify additions (no semi-colons).
					
					Changed the display for properties whose values cannot be determined, in FillGridWithProperties()
					
					Wrapped code in LoadProperties() to not error out when access method for a property fails.
					
					Added Property nFontsize to form.  If non-zero, used for both the grid and treeview.
					
					Changed references to Fontsize for headers to use nFontsize.
					
					Removed display of ActiveForm, Controls, and Objects, which showed redundant entries.
					
					Changed display of names in TreeView to use the "Name" property if it exists (mixed case)..
					
					Replaced collection oFlatCollection with array aObjectList due to hanging references which
						could wreak havoc in calling environment.
						
					Added Property nTreeViewWidth (used if non-zero)
					
					Added Property cCursonName, used for the name of the cursor used by the grid.  If empty,
						an obscure alternative is used.
						
					Added method "BrowseNoWait" to allow call to alternative to Browse (on double click of grid).
					
					The list of controls/objects in the treeview is alphabetical, except that objects precede child controls.
					
					A checkbox has been added to filter the list of properties displayed.  The list
						is in property cSelectedProperties.
						
					Renamed some of the methods (hopefully adding clarity)
					
																		
																															
			
		Endtext
	ENDPROC

	PROCEDURE addtoobjectlist
		Lparameters toObject
		
		Local lnRow, lnRowCount
		If Alen(This.aObjectList) > 1
			lnRowCount = Alen(This.aObjectList, 1)
			For lnRow = 1 To m.lnRowCount
				If Compobj(m.toObject, This.aObjectList[m.lnRow, 2])
					Return This.aObjectList[m.lnRow, 1]
				Endif
			Endfor
		Else
			lnRowCount = 0
		Endif
		
		lnRow = m.lnRowCount + 1
		Dimension This.aObjectList[m.lnRow, 2]
		This.aObjectList[m.lnRow, 1] = Sys(2015)
		This.aObjectList[m.lnRow, 2] = m.toObject
		
		Return This.aObjectList[m.lnRow, 1]
		
		
		
		
		
	ENDPROC

	PROCEDURE browse		&& Called to Browse the table identified in the current node; see also BrowseRefresh.
		Local lcAlias, lnDataSession
		lcAlias		  = This.GetBrowseCursorName()
		lnDataSession = This.nBrowseDataSessionID
		This.BrowseCursor(m.lnDataSession, m.lcAlias)
		
	ENDPROC

	PROCEDURE browsecursor
		Lparameters lnDataSession, lcAlias
		
		Local loFormBox As 'Browse' Of 'explorer.vcx'
		
		*** DH 2022-03-03: use This.ClassLibrary rather than hard-coded Explorer.vcx so pathing not an issue
		loFormBox = newobject('frmBrowse', This.ClassLibrary)
		
		With m.loFormBox
			.nDataSession	 = m.lnDataSession
			.cAlias			 = m.lcAlias
			.lBrowseReadOnly = This.lBrowseReadOnly
			.cBrowseFont	 = This.cBrowseFont
		Endwith
		
		m.loFormBox.Show()
		
		Thisform.Show()
		
	ENDPROC

	PROCEDURE cfavorites_access
		Return This.cDefaultFavorites + ', ' + This.cMyFavorites
		
	ENDPROC

	PROCEDURE closetable
		Lparameters lcAlias
		
		Do Case
			Case Empty(m.lcAlias)
		
			Case Not Used(m.lcAlias)
		
			Otherwise
				Use In (m.lcAlias)
		
		Endcase
	ENDPROC

	PROCEDURE createcursorforgrid
		This.cCursorName = 'Explorer_PropertyValues' + Sys(2015)
		Create Cursor (This.cCursorName) (Name C(60), Type C(3), Value C(250), Favorite L)
		Index On Iif(Favorite, 'A', 'B') + Upper(Name) Tag Favorites 
		
		
		
		
	ENDPROC

	PROCEDURE dblclickcursor
		Local lcCursor, lcFullObjectPath, lcPropName, lcPropVal, lcType, llOK, loException, loObject
		Local lxNewValue, lxValue
		
		*-- If the Value field of the current row in the Properties cursor
		*-- is the name of a Cursor that is open in the current data session,
		*-- then Browse the cursor
		
		If This.lDblClickReadOnly
			Return
		Endif
		
		lcCursor = This.oPropGrid.RecordSource
		loObject = This.GetObjectReference(This.oCurrentNode)
		
		Try
			lcPropName = Trim(&lcCursor..Name)
			lcType	   = Trim(&lcCursor..Type)
			lxValue	   = m.loObject.&lcPropName
			llOK	   = .T.
		Catch
		
		Endtry
		
		Do Case
			Case m.lcType = 'A'
				This.FillGridWithArray(m.loObject, Left(m.lcPropName, At('[', m.lcPropName) - 1))
				Return
			Case '[' $ m.lcPropName
				lxValue = m.loObject.&lcPropName
			Case Not m.llOK
				Return
			Case Not m.lcType $ 'LCNDT'
				Return
		Endcase
		
		* Prompt
		
		If m.lcType = 'L'
			lxNewValue = Not m.lxValue
		Else
			lxNewValue = This.Inputbox(m.lcPropName, m.lxValue)
			Do Case
				Case Vartype(m.lxNewValue) = 'O'
					Return
				Case m.lcType = 'C'
					lxNewValue = Trim(m.lxNewValue)
			Endcase
		Endif
		
		Try
			loObject.&lcPropName = m.lxNewValue
			llOK				 = .T.
		Catch To m.loException
			Messagebox(m.loException.Message)
			llOK = .F.
		Endtry
		
		* and update the grid
		If m.llOK
		
			*** JRN 2022-02-09 : Hook to allow log of changes made
			lcFullObjectPath = This.txtFullPath.Value
			This.LogChange(Thisform.cFormName, This.oFirstObject, m.lcFullObjectPath, m.lcPropName, m.lxValue, m.lxNewValue)
		
			lcType = Vartype(m.lxNewValue)
			If m.lcType = 'C'
				lcPropVal = This.TransformCharacter(m.lxNewValue)
			Else
				lcPropVal = Transform(m.lxNewValue)
			Endif
			Replace Type With m.lcType, Value With m.lcPropVal In m.lcCursor
		
			If m.lcType = 'L'
				This.Refresh()
			Endif
		Endif
		
	ENDPROC

	PROCEDURE Destroy
		Local lnI
		
		This.CloseTable(This.cCursorName)
		This.CloseTable(This.cCKLKeywordCursor)
		This.CloseTable(This.cVFPKeywordCursor)
		
		This.oFirstObject = Null
		
		For lnI = 1 To Alen(This.aObjectList)
			This.aObjectList[m.lnI] = Null
		Endfor
		
		
	ENDPROC

	PROCEDURE explore
		Lparameters toObject, tcObjectName
		*** DH 2022-04-03: added laMembers
		Local laMembers[1], loFirstNode
		
		This.LockTreeView(.T.)
		
		If Vartype(m.toObject) = 'O'
		*** DH 2022-04-03: ensure object has members
			if amembers(laMembers, m.toObject) = 0
				messagebox('Object Explorer cannot be used with this type of object.', ;
					16, 'Object Explorer')
				return .F.
			endif amembers(laMembers, m.toObject) = 0
		*** DH 2022-04-03: end of new code
			loFirstNode			 = This.LoadObject(m.toObject)
			loFirstNode.Selected = .T.
		Else
			Messagebox('You must pass an object to start using this form.')
			Return .F.
		Endif
		
		Try
			This.oleTree.NodeClick(m.loFirstNode)
		
			If Not Empty(m.tcObjectName)
				This.oleTree.Nodes(1).Text = m.tcObjectName
			Endif
		
			This.oleTree.Expand(m.loFirstNode)
		Catch
		Endtry
		
		If This.nFontSize # 0
			This.oPropGrid.FontSize	= This.nFontSize
			This.oleTree.Font.Size	= This.nFontSize
		Endif
		
		This.LockTreeView(.F.)
		
	ENDPROC

	PROCEDURE fillgridwitharray
		Lparameters toObject, tcPropName
		
		Local lcCursorName, lcPropName, lcPropType, lcPropVal, lnColumns, lnI, lnJ, lnRows, lxValue
		
		lcCursorName = This.ZapCursor(.T.)
		
		lnRows	  = Alen(m.toObject.&tcPropName, 1)
		lnColumns = Alen(m.toObject.&tcPropName, 2)
		
		For lnI = 1 To m.lnRows
			For lnJ = 1 To Max(m.lnColumns, 1)
		
				lxValue	   = m.toObject.&tcPropName.[lnI, lnJ]
				lcPropVal  = Transform(m.lxValue)
				lcPropType = Vartype(m.lxValue)
				Do Case
					Case Isnull(m.lxValue)
						lcPropVal = 'Null'
					Case m.lcPropType = 'C'
						lcPropVal = This.TransformCharacter(m.lxValue)
				Endcase
		
				lcPropName = m.tcPropName + '[' + Transform(m.lnI) + Iif(m.lnColumns > 0, ', ' + Transform(m.lnJ), '') + ']'
		
				Insert Into (m.lcCursorName) (Name, Type, Value) Values (m.lcPropName, m.lcPropType, m.lcPropVal)
			Next m.lnJ
		
			If m.lnColumns > 1	
				Append Blank
			EndIf 
		Next m.lnI
		
		This.RefreshGrid()
		
		This.cmdBrowse.Refresh()
		
		This.oPropGrid.ActivateCell(1,1)
		
		Keyboard '{UPARROW}'
		
		
		
	ENDPROC

	PROCEDURE fillgridwithproperties		&& Displays the properties for the passed node.
		Lparameters toNode
		
		Local laPEMs[1], lcCursorName, lcPropName, lcPropRef, lcPropType, lcPropVal, llArray, lnCols, lnI
		Local lnRows, loItem, lxValue
		
		loItem = This.GetObjectReference(m.toNode)
		
		lcCursorName = This.ZapCursor()
		
		If Not Isnull(m.loItem)
			For lnI = 1 To Amembers(laPEMs, m.loItem)
				lcPropName = This.FixCaseofProperty(m.laPEMs[m.lnI])
				lcPropRef  = 'loItem.' + m.laPEMs[m.lnI]
		
				If This.SkipPropertyName(m.loItem, m.lcPropName)
					Loop
				Endif
		
				Try
					lxValue	   = Evaluate(m.lcPropRef)
					lcPropVal  = Transform(m.lxValue)
					lcPropType = Type(m.lcPropRef)
					Do Case
						Case Isnull(m.lxValue)
							lcPropVal = 'Null'
						Case m.lcPropType = 'C'
							lcPropVal = This.TransformCharacter(m.lxValue)
					Endcase
				Catch
					* This occurs when a property that would normally reference an object,
					* such as parent, does not return an object reference.
					*** JRN 2017-11-19
					*	or when the property value has an access method that fails
					*	and change the display of such values
					lcPropVal  = '*** Error getting value ***'
					lcPropType = '?'
				Endtry
		
				*** JRN 2017-11-22 : array?
				Try
					llArray = Type(m.lcPropRef, 1) = [A]
				Catch
					llArray = .F.
				Endtry
		
				If m.llArray
					lnRows	   = Alen(&lcPropRef, 1)
					lnCols	   = Alen(&lcPropRef, 2)
					lcPropName = m.lcPropName + '[' + Transform(m.lnRows) + Iif(m.lnCols > 0, ', ' + Transform(m.lnCols), '') + ']'
					lcPropType = 'A'
					lcPropVal  = '<Array>'
				Endif
		
				Insert Into (m.lcCursorName) (Name, Type, Value) Values (m.lcPropName, m.lcPropType, m.lcPropVal)
			Next
		Endif
		
		Update GridCursor Set Favorite = .T. From (This.cCursorName) As GridCursor Join Favorites On Upper(GridCursor.Name) = Favorites.Name
		
		Select (This.cCursorName)
		If This.lSortFavorites
			Set Order To Favorites
		Else
			Set Order To
		Endif
		
		This.txtFullPath.Value = Chrtran(m.toNode.Tag.Path, ' ', '')
		
		This.RefreshGrid()
		
		This.cmdBrowse.Refresh()
		
		
		
	ENDPROC

	PROCEDURE fixcaseofproperty
		Lparameters lcName
		Local lcCKL, lcKeyWord, lcResult, lcVFP
		If Not Isnull(This.oFixCase)
			lcResult = This.oFixCase.FixCase(m.lcName, .T.)
			If Not Empty(m.lcResult)
				Return m.lcResult
			Endif
		Endif
		
		lcKeyWord = Upper(Trim(m.lcName)) + ' '
		lcCKL	  = This.cCKLKeywordCursor
		lcVFP	  = This.cVFPKeywordCursor
		Do Case
			Case (not Empty(m.lcCKL)) and Used(m.lcCKL) And Seek(m.lcKeyWord, m.lcCKL, 'Keyword')
				Return Trim(&lcCKL..KeyWord)
			Case (not Empty(m.lcVFP)) and Used(m.lcVFP) And Seek(m.lcKeyWord, m.lcVFP, 'Token')
				Return Trim(&lcVFP..Token)
			Case m.lcName # Upper(m.lcName)
				Return m.lcName
			Otherwise
				Return Lower(m.lcName)
		Endcase
		
	ENDPROC

	PROCEDURE getbrowsecursorname		&& Returns the name of the cursor for the Browse button and saves the DataSessionID it is found in.
		Local lcAlias, lnDataSession, loCurrentObject, loTopObject
		
		loTopObject		= This.oFirstObject
		loCurrentObject	= This.GetObjectReference(This.oCurrentNode)
		
		lcAlias		  = ''
		lnDataSession = 0
		Do Case
		*** DH 2022-03-04: handle no object
			* object not found or released
		    case isnull(m.loCurrentObject)
				messagebox('The selected object no longer exists. Object Explorer will close.', ;
					0 + 16, Thisform.Caption)
				Thisform.Release()
		*** DH 2022-03-04: end of new code
		
				* current node has own data session and cAlias
			Case Pemstatus(m.loCurrentObject, 'DataSessionID', 5)
				If Pemstatus(m.loCurrentObject, 'cAlias', 5)
					lcAlias		  =  m.loCurrentObject.cAlias
					lnDataSession = m.loCurrentObject.DataSessionId
				Endif
		
				* top node does not its own data session
			Case Pemstatus(m.loTopObject, 'DataSessionID', 5) = .F.
		
				* current node has cAlias in data session for top object
			Case Pemstatus(m.loCurrentObject, 'cAlias', 5)
				lcAlias		  =  m.loCurrentObject.cAlias
				lnDataSession = m.loTopObject.DataSessionId
		
				* current node has RecordSource in data session for top object
			Case Pemstatus(m.loCurrentObject, 'RecordSource', 5)
				lcAlias		  =  m.loCurrentObject.RecordSource
				lnDataSession = m.loTopObject.DataSessionId
		
				* current node is a column in a grid and has RecordSource in data session for top object
			Case Pemstatus(m.loCurrentObject, 'BaseClass', 5) And Upper(m.loCurrentObject.BaseClass) = 'COLUMN'
				lcAlias		  =  m.loCurrentObject.Parent.RecordSource
				lnDataSession = m.loTopObject.DataSessionId
		
				* top node has cAlias in data session for top object
			Case Pemstatus(m.loTopObject, 'cAlias', 5)
				lcAlias		  =  m.loTopObject.cAlias
				lnDataSession = m.loTopObject.DataSessionId
		Endcase
		
		This.nBrowseDataSessionID = m.lnDataSession
		Return m.lcAlias
	ENDPROC

	PROCEDURE getcollectionnodename		&& For items in a collection, returns the caption to be used for nodes in the TreeView
		Lparameters toCollection, toItem, tcKey, tnIndex
		
		Local lcDefault
		
		lcDefault = This.cCollectionItemPrefix + '[' + Transform(m.tnIndex) + ']'
		Return Evl(m.tcKey, m.lcDefault)
		
		
	ENDPROC

	PROCEDURE getnodefor
		Lparameters toObject
		
		Local loNode, loThisObject
		
		For Each m.loNode In This.oleTree.Nodes FoxObject
			loThisObject = This.GetObjectReference(m.loNode)
			If Vartype(m.loThisObject) = 'O' and Compobj(m.loThisObject, m.toObject)
				Return m.loNode
			Endif
		Endfor
		
		Return Null
		
		
	ENDPROC

	PROCEDURE getnodetext		&& For objects other than collections, returns the caption to be used for nodes in the TreeView
		Lparameters loObject, lcNodeText
		
		Local lcControlSource, lcExtraText
		lcExtraText = ''
		
		If This.lShowCaption And Pemstatus(m.loObject, 'Caption', 5) And Not Empty(m.loObject.Caption)
			lcExtraText = ' "' + m.loObject.Caption + '"'
		Endif
		
		If This.lShowControlSource And Pemstatus(m.loObject, 'ControlSource', 5) And Not Empty(m.loObject.ControlSource)
			lcControlSource	= m.loObject.ControlSource
			lcExtraText		= m.lcExtraText + ' [' + m.lcControlSource + ']'
		Endif
		
		If Empty(m.lcExtraText)
			Return m.lcNodeText
		Else
			Return m.lcNodeText + ' (' + Alltrim(m.lcExtraText) + ')'
		Endif
		
		
	ENDPROC

	PROCEDURE getobjectreference		&& Returns the object reference to the item represented by a node.
		Lparameters	toNode
		
		Local lnRow
		
		If Vartype(m.toNode.Tag) = 'O'
			lnRow = Ascan(This.aObjectList, m.toNode.Tag.ObjectID, 1, -1, 1, 15)
			If m.lnRow # 0
				Return This.aObjectList[m.lnRow, 2]
			Endif
		Else
			Return Null
		Endif
		
		
	ENDPROC

	PROCEDURE getsavedproperty
		Lparameters lcProperty
		= Seek(Upper(m.lcProperty))
		Return Value
		
	ENDPROC

	PROCEDURE haschildobjects
		Lparameters toObject
		
		Local llFound, lnI, loException, lvProperty
		If This.lShowItems And Type([toObject.Count]) = [N] And m.toObject.Count > 0
			Return .T.
		Endif
		
		If This.lShowMemberobjects And Amembers(laMembers, m.toObject, 2) > 0
			Return .T.
		Endif
		
		For lnI = 1 To Amembers(laMembers, m.toObject)
		
			If This.SkipPropertyName(m.toObject, m.laMembers[m.lnI])
				Loop
			Endif
		
			Try
				lvProperty = Evaluate([toObject.] + m.laMembers[m.lnI])
			Catch To m.loException
				lvProperty = Null
			Endtry
		
			Try
				Do Case
					Case Type([toObject.] + m.laMembers[m.lnI], 1) = [A]
						*	Array
					Case Type([lvProperty]) = [O] And Not Isnull(m.lvProperty)
						llFound = .T.
					Case Type([toObject.] + m.laMembers[m.lnI], 1) = [C]
						llFound = .T.
				Endcase
			Catch To m.loException
		
			Endtry
		
			If m.llFound
				Return .T.
			Endif
		
		Next
		
		
		Return .F.
		
	ENDPROC

	PROCEDURE Init
		Local laFavorites[1], lnCount, lnI
		
		lnCount = Alines(laFavorites, Upper(This.cFavorites), 1, ' ', ',', Chr[13], chr[10], Chr[9])
		Create Cursor Favorites (Name C(60))
		For lnI = 1 To m.lnCount
			Insert Into Favorites Values(m.laFavorites[m.lnI])
		Endfor
		Index On Name Tag Name
		
		This.CreateCursorForGrid()
		Select (This.cCursorName)
		
		This.SetupGridColumns()
		
		If Pemstatus(_Screen, 'cThorDispatcher', 5)
			Execscript (_Screen.cThorDispatcher, 'Thor_Proc_GetISXOptions')
			This.oFixCase = _Screen.oISXOptions.oKeyWordList
		Else
			This.cCKLKeywordCursor = This.UseKeywordTable(This.cCKLKeywordTableName, 'CKL')
			This.cVFPKeywordCursor = This.UseKeywordTable(This.cVFPKeywordTableName, 'VFP')
		Endif
		
		
		
		
	ENDPROC

	PROCEDURE inputbox
		Lparameters lcPropName, lxValue
		
		Local lxResult As 'Empty'
		Local lnCol, lnRow, loInputBox
		
		*** DH 2022-02-27: use InputBox_ShowWindow1 in we're in a top-level form rather than if we're modal
		***loInputBox		= Newobject(Iif(Thisform.WindowType = 0, 'InputBox', 'InputBox_ShowWindow1'), 'explorer.vcx')
		*** DH 2022-03-03: use This.ClassLibrary rather than hard-coded Explorer.vcx so pathing not an issue
		loInputBox = newobject(iif(Thisform.ShowWindow = 0, 'InputBox', 'InputBox_ShowWindow1'), This.ClassLibrary)
		
		If This.lAlignInputBoxToCursor
			lnRow = Mrow(0, 3)
			lnCol = Mcol(0, 3)
		
			loInputBox.Top	= Thisform.Top + m.lnRow + 45
			loInputBox.Left	= Thisform.Left + m.lnCol - 110
		
		Else
			loInputBox.Top	= Thisform.Top + (Thisform.Height - m.loInputBox.Height) / 3
			loInputBox.Left	= (_vfp.Width - m.loInputBox.Width) / 2
		Endif
		
		loInputBox.Caption	= 'Enter value for ' + m.lcPropName && or =(phrase to execute)'
		loInputBox.cCaption	= m.lcPropName
		loInputBox.xValue	= m.lxValue
		
		m.loInputBox.Show()
		
		lxResult = Createobject('Empty')
		If Vartype(m.loInputBox) = 'O'
			If m.loInputBox.lCancelled = .F.
				lxResult = m.loInputBox.xValue
			Endif
			m.loInputBox.Release()
		Endif
		
		Return m.lxResult
		
		
		
		
	ENDPROC

	PROCEDURE loadchildobjects		&& Loads the member objects of an object into the tree view.
		Lparameters toObject, toParentNode
		
		Local laMembers[1], lnI, loObject
		
		If This.lShowMemberobjects And Type([toObject]) = [O]
			For lnI = 1 To Amembers(laMembers, m.toObject, 2)
				loObject = Evaluate([toObject.] + m.laMembers[m.lnI])
				This.LoadObject(m.loObject, m.toParentNode)
			Next
		Endif
		
	ENDPROC

	PROCEDURE loadcollectionitems		&& Loads the items in a collection into the treeview.
		Lparameters			;
			toObject,		;
			toParentNode
		
		Local lcName, lnI, loNode, lvItem
		
		If This.lShowItems And Type([toObject.Count]) = [N] And m.toObject.Count > 0
			Try
				For lnI = m.toObject.Count To 1 Step - 1
					lvItem = m.toObject.Item(m.lnI)
					If Type([lvItem]) = [O]
						lcName	  = This.GetCollectionNodeName(m.toObject, m.lvItem, m.toObject.GetKey(m.lnI), m.lnI)
						This.LoadObject(m.lvItem, m.toParentNode, m.lcName)
					Else
						loNode		  = This.NewNode()
						loNode.Parent = m.toParentNode
						loNode.Text	  = Transform(m.lvItem)
					Endif
				Next
			Catch
			Endtry
		Endif
		
		
	ENDPROC

	PROCEDURE loadobject		&& Loads an object into the TreeView.
		Lparameters toObject, toParentNode, tcName
		
		Local loTag As 'Empty'
		Local lcName, lcNodeText, loDummyNode, loException, loNode
		
		With This
			loTag = Createobject('Empty')
			AddProperty(m.loTag, 'ObjectID')
			AddProperty(m.loTag, 'Path', '')
		
			If Isnull(.oFirstObject)
				.oFirstObject = m.toObject
				.oleTree.Nodes.Clear()
		*** DH 2022-03-03: bind to QueryUnload so closing the form works
				if pemstatus(.oFirstObject, 'QueryUnload', 5)
					bindevent(.oFirstObject, 'QueryUnload', This, 'OnObjectReleased')
				endif pemstatus(.oFirstObject, 'QueryUnload', 5)
		*** DH 2022-03-03: end of new code
			Endif
		
			Try
				lcName = Sys(1272, m.toObject)
			Catch To m.loException
				lcName = 'Unknown'
			Endtry
		*** DH 2022-02-27: call NewNode
		***	loNode		   = .oleTree.Nodes.Add()
			loNode         = .NewNode(m.toParentNode)
			loTag.ObjectID = This.AddToObjectList(m.toObject)
			loNode.Tag	= m.loTag
		
			If Type([toParentNode.Text]) = 'C'
		*** DH 2022-02-27: don't set Parent since we added the node to the parent earlier
		*		loNode.Parent = m.toParentNode
				loTag.Path	  = m.toParentNode.Tag.Path
			Endif
		
			Do Case
				Case Not Empty(m.tcName) And Type([tcName]) = 'C'
					lcNodeText = m.tcName
				Case Pemstatus(m.toObject, [Name], 5)
					lcNodeText = m.toObject.Name
				Case Not Empty(m.lcName) And m.lcName # [unknown type]
					lcNodeText = m.lcName
				Case Pemstatus(m.toObject, [Class], 5)
					lcNodeText = m.toObject.Class
				Otherwise
					lcNodeText = [Object]
			Endcase
		
			If .oleTree.Nodes.Count > 1
				loTag.Path = m.loTag.Path + '.' + Trim(m.lcNodeText)
			EndIf 
		
			*!* ******************** Removed 05/20/2020 *****************
			*!* If Inlist(Left(m.lcNodeText, 1), 'O', 'o')
			*!* 	lcNodeText = Strtran(m.lcNodeText, 'O', 'o', 1, 1, 1)
			*!* Endif
		
			If This.HasChildObjects(m.toObject)
		*** DH 2022-02-27: call NewNode and don't set Parent
		***		loDummyNode		   = This.oleTree.Nodes.Add()
				loDummyNode		   = .NewNode(m.loNode)
				loDummyNode.Text   = [(Loading...)]
		***		loDummyNode.Parent = m.loNode
				lcNodeText		   = ' ' + m.lcNodeText
			Endif
		
			loNode.Text	= This.GetNodeText(m.toObject, m.lcNodeText)
		
			loNode.Expanded = .F.
		Endwith
		
		Return m.loNode
		
	ENDPROC

	PROCEDURE loadotherobjects		&& Loads the properties of an object into the treeview.
		Lparameters			;
			toObject,		;
			toParentNode
		
		Local laMembers[1], lcMemberName, lcName, lnI, lnJ, loCollectionNode, loException, loObject
		Local lvProperty
		
		If Type([toObject]) # [O]
			Return
		Endif
		
		
		For lnI = 1 To Amembers(laMembers, m.toObject)
		
			lcMemberName = m.laMembers[m.lnI]
			If This.SkipPropertyName(m.toObject, lcMemberName)
				Loop
			Endif
		
			Try
				lvProperty = Evaluate([toObject.] + lcMemberName)
			Catch To m.loException
				lvProperty = Null
			Endtry
		
			*** JRN 2017-11-19 : Wrap with Try/Catch, needed when an access method for a property fails.
			Try
				Do Case
					Case Type([toObject.] + lcMemberName, 1) = [A]
						*	Array
					Case Type([lvProperty]) = [O] And Not Isnull(m.lvProperty)
						lcName = lcMemberName
						If Left(m.lcName, 1) = 'O'
							lcName = 'o' + Substr(m.lcName, 2)
						EndIf
						If 0 = Atc(' ' + lcName + ' ', ' ' + Chrtran(This.cSkippedObjectNames, ',', ' ') + ' ')
							This.LoadObject(m.lvProperty, m.toParentNode, '  ' + This.FixCaseofProperty(m.lcName))
						EndIf 
					Case Type([toObject.] + lcMemberName, 1) = [C]
						*   Collection
						loCollectionNode = Null
						Try
							For lnJ = 1 To Evaluate([toObject.] + lcMemberName + [.Count])
								loObject = Evaluate([toObject.] + lcMemberName + [(] + Transform(m.lnJ) + [)])
								If Isnull(m.loCollectionNode)
		*** DH 2022-02-27: call NewNode and don't set Parent
		***							loCollectionNode		= This.oleTree.Nodes.Add()
		***							loCollectionNode.Parent	= m.toParentNode
									loCollectionNode		= This.NewNode(m.toParentNode)
									loCollectionNode.Text	= lcMemberName
								Endif
								This.LoadObject(m.loObject, m.loCollectionNode)
							Next
						Catch To m.loException
		
						Endtry
						loCollectionNode = Null
				Endcase
			Catch To m.loException
		
			Endtry
		Next
		
		 
	ENDPROC

	PROCEDURE locktreeview
		Lparameters tlLock
		Local lnStatus
		
		Declare Integer LockWindowUpdate In Win32API Integer nHandle
		
		Do Case
			Case m.tlLock And This.lWindowLocked
		
			Case m.tlLock
				lnStatus		   = LockWindowUpdate(This.oleTree.HWnd)
				This.lWindowLocked = .T.
		
			Otherwise
				LockWindowUpdate(0)
				This.lWindowLocked = .F.
		Endcase
		
		
		
		
	ENDPROC

	PROCEDURE logchange		&& Hook to allow capture of changes made to properties
		Lparameters tcFileName, toTopObject, tcFullObjectPath, tcPropName, txOldValue, txNewValue
		
		*  Called for each change to a property in the grid
		
		* Parameters:
		*	tcFileName			Full file name of the form (if available)
		*	toTopObject			Top object in the TreeView
		*	tcFullObjectPath	Relative path from <toTopObject> to the object being edited
		*	tcPropName			Name of property being edited
		*	txOldValue			Previous value of the property
		*	txNewValue			New value
		
		
	ENDPROC

	PROCEDURE navigatetoobject
		Lparameters toObject
		
		Local laObjects[1], lnCount, lnI, loNode, loObject
		
		Dimension m.laObjects[1]
		laObjects[1] = m.toObject
		lnCount		 = 1
		
		loObject = m.toObject
		Do While Compobj(m.loObject, This.oFirstObject) = .F.
			If Pemstatus(m.loObject, 'Parent', 5)
				loObject = m.loObject.Parent
				lnCount	 = m.lnCount + 1
				Dimension m.laObjects[m.lnCount]
				laObjects[m.lnCount] = m.loObject
			Else
				laObjects = Null
				Return .F.
			Endif
		Enddo
		
		For lnI = m.lnCount To 1 Step - 1
			loNode = This.GetNodeFor(m.laObjects[m.lnI])
		*** DH 2022-04-02: ensure node isn't null
			if vartype(loNode) = 'O'
				This.oleTree.Expand(m.loNode)
		*** DH 2022-02-27: ensure the node is expanded
				m.loNode.Expanded = .T.
			endif vartype(loNode) = 'O'
		Endfor
		laObjects = Null
		
		*** DH 2022-04-02: ensure node isn't null
		if vartype(loNode) = 'O'
		*** DH 2022-02-27: ensure the node is visible
			loNode.EnsureVisible()
			loNode.Selected		 = .T.
			This.FillGridWithProperties(loNode)
		endif vartype(loNode) = 'O'
		
	ENDPROC

	PROCEDURE newnode		&& Adds an empty node to the treeview.
		*** DH 2022-02-27: accept toParentNode
		lparameters toParentNode
		Local loNode
		
		*** DH 2022-02-27: pass the appropriate parameters to Add
		***loNode = This.oleTree.Nodes.Add()
		if type([toParentNode.Text]) = 'C'
			if empty(toParentNode.Key)
				toParentNode.Key = sys(2015)
			endif empty(toParentNode.Key)
			loNode = This.oleTree.Nodes.Add(toParentNode.Key, 4)
		else
			loNode = This.oleTree.Nodes.Add()
		endif type([toParentNode.Text]) = 'C'
		*** DH 2022-02-27: end of modification
		
		Return loNode
		
	ENDPROC

	PROCEDURE ocurrentnode_access
		Local loNode
		
		For Each m.loNode In This.oleTree.Nodes FoxObject
			If m.loNode.Selected
				Return m.loNode
			Endif
		Endfor
		
		Return Null
		
		
	ENDPROC

	PROCEDURE onobjectreleased		&& Fired when the object being explored is released
		*** DH 2022-03-03: added this method, which is bound to QueryUnload by
		***		LoadObject so closing the form works
		Thisform.Release()
		
	ENDPROC

	PROCEDURE pemstatusfails
		Lparameters loItem, m.lcName
		
		Local llDummy, llResult, loException
		Try
			llDummy	 = Pemstatus(m.loItem, m.lcName, 0)
			llResult = .F.
		Catch To m.loException
			llResult = .T.
		Endtry
		
		Return m.llResult
	ENDPROC

	PROCEDURE refreshgrid
		Goto Top In (This.cCursorName)
		This.oPropGrid.Column4.width = 0
		This.oPropGrid.Refresh()
		
		*!* ******************** Removed 05/18/2020 *****************
		*!* With This.oPropGrid
		*!* 	.Refresh()
		*!* 	.AutoFit()
		
		*!* 	.Column1.Width = Max(.Column1.Width + 12, 150)
		*!* 	.Column2.Width = 30
		*!* 	.Column3.Width = Max(.Column3.Width + 60, 400)
		
		*!* 	.Refresh()
		*!* Endwith
		
		
	ENDPROC

	PROCEDURE resizecontrols
	ENDPROC

	PROCEDURE saveproperty
		Lparameters lcProperty)
				= Seek(Upper(m.lcProperty))
				Replace Value With Evl(Getpem(This, m.lcProperty),0)
				
	ENDPROC

	PROCEDURE setupgridcolumns
		Local lcDynBackColor, lnFontSize
		lnFontSize = Evl(This.nFontSize, 8)
		
		Select(This.cCursorName)
		
		With This.oPropGrid
			.RecordSource = ''
			.ColumnCount  = -1
			.RecordSource = This.cCursorName
		
			.RecordMark	= .F.
			.DeleteMark	= .F.
		
			.Column1.Header1.Alignment = 0
			.Column1.Header1.FontSize  = m.lnFontSize
			.Column1.Width			   = 150
			.Column1.ReadOnly		   = .T.
		
			.Column2.Header1.Alignment = 2
			.Column2.Header1.FontSize  = m.lnFontSize
			.Column2.Width			   = 30
			.Column2.Alignment		   = 2
			.Column2.ReadOnly		   = .T.
		
			.Column3.Header1.Alignment = 0
			.Column3.Header1.FontSize  = m.lnFontSize
			.Column3.Width			   = 1000
		
			.Column4.Width	 = 0
			.Column4.Visible = .F.
		
			If This.lFavoritesBold
				.Column1.DynamicFontBold = 'Favorite'
				.Column2.DynamicFontBold = 'Favorite'
				.Column3.DynamicFontBold = 'Favorite'
			Endif
		
			If Not Empty(This.nFavoritesBackColor)
				lcDynBackColor			  = Textmerge('IIF(Favorite, <<This.nFavoritesBackColor>>, Rgb(255, 255, 255))')
				.Column1.DynamicBackColor = m.lcDynBackColor
				.Column2.DynamicBackColor = m.lcDynBackColor
				.Column3.DynamicBackColor = m.lcDynBackColor
			Endif
		
			Bindevent(.Column3.Text1, 'DblClick', This, 'DblClickCursor')
		
		Endwith
	ENDPROC

	PROCEDURE skippropertyname
		Lparameters loItem, lcName
		
		Do Case
				* always skip these properties
			Case Atc(' ' + m.lcName + ' ', ' ACTIVECONTROL ACTIVEFORM COLUMNS CONTROLS OBJECTS PARENT PAGES _MEMBERDATA ') # 0
				Return .T.
				
			Case This.PemstatusFails(m.loItem, m.lcName) && This occurs for OLE things
				Return .F.
		
			Case Pemstatus(m.loItem, m.lcName, 0) = .F. And This.lShowNonDefault = .T.
				Return .T.
		
			Case Pemstatus(m.loItem, 'BaseClass', 5) = .F.
				Return .F.
		
			Case Pemstatus(m.loItem, m.lcName, 4) = .F.
				Return This.lShowNative = .F.
		
			Case Pemstatus(m.loItem, m.lcName, 6) = .T.
				Return This.lShowInherited = .F.
		
			Otherwise
				Return This.lShowCustom = .F.
		
		Endcase
		
		
		
	ENDPROC

	PROCEDURE sortnode
		Lparameters toObject
		
		Do Case
			Case This.lSortTreeViewNodes = .F.
				Return .F.
			Case Type([toObject.Count]) = [N] && Collection?
				Return .F.
			Otherwise
				Return .T.
		Endcase
		
	ENDPROC

	PROCEDURE transformcharacter		&& Returns the text for character values that appear in the third column of the grid.
		Lparameters lcValue
		Local MaxWidth
		
		MaxWidth = Max(40, Floor(This.nMaxCharacterWidth))
		Return '"' + Left(m.lcValue, m.MaxWidth) + '"' + Iif(Len(m.lcValue) > m.MaxWidth, ' ...', '') + '  (' + Transform(Len(m.lcValue)) + ')'
	ENDPROC

	PROCEDURE usekeywordtable
		Lparameters lcFileName, lcPrefix
		
		Local lcCursor
		Do Case
			Case Empty(m.lcFileName)
				Return .F.
			Case Not File(m.lcFileName)
				Return .F.
			Otherwise
				lcCursor = lcPrefix + '_Keywords' + Sys(2015)
				Use (m.lcFileName) Again Shared In 0 Alias (m.lcCursor)
				Return m.lcCursor
		Endcase
		
	ENDPROC

	PROCEDURE zapcursor
		Lparameters llNoOrder
		
		Local lcSafety
		Select (This.cCursorName)
		
		lcSafety = Set('Safety')
		Set Safety Off
		
		Zap
		
		Set Safety &lcSafety
		
		If m.llNoOrder
			Set Order To
		Else
			Set Order To Favorites
		Endif
		
		Return This.cCursorName
	ENDPROC

	PROCEDURE cmdBrowse.Click
		This.Parent.Browse()
		
	ENDPROC

	PROCEDURE cmdBrowse.Refresh
		Local lcBrowseAlias
		
		lcBrowseAlias = This.Parent.GetBrowseCursorName()
		
		If Empty(m.lcBrowseAlias)
			This.Caption = 'Browse'
			This.Enabled = .F.
		Else
			This.Caption = 'Browse ' + m.lcBrowseAlias
			This.Enabled = .T.
		Endif
		
		
		
		
	ENDPROC

	PROCEDURE cntCheckBoxes.chklShowCustom.Valid
		This.Parent.Parent.FillGridWithProperties(This.Parent.Parent.oCurrentNode)
	ENDPROC

	PROCEDURE cntCheckBoxes.chklShowInherited.Valid
		This.Parent.Parent.FillGridWithProperties(This.Parent.Parent.oCurrentNode)
	ENDPROC

	PROCEDURE cntCheckBoxes.chklShowNative.Valid
		This.Parent.Parent.FillGridWithProperties(This.Parent.Parent.oCurrentNode)
	ENDPROC

	PROCEDURE cntCheckBoxes.chklShowNonDefault.Valid
		This.Parent.Parent.FillGridWithProperties(This.Parent.Parent.oCurrentNode)
	ENDPROC

	PROCEDURE cntCheckBoxes.chklSortFavorites.Refresh
		This.Visible = Not Empty(This.Parent.Parent.cFavorites)
		
	ENDPROC

	PROCEDURE cntCheckBoxes.chklSortFavorites.Valid
		This.Parent.Parent.FillGridWithProperties(This.Parent.Parent.oCurrentNode)
	ENDPROC

	PROCEDURE cntCheckBoxes.txtFilter.InteractiveChange
		Local lcCursorName, lcFilter
		Select (This.Parent.Parent.cCursorName)
		
		If Empty(This.Value)
			Set Filter To
		Else
			lcFilter = ['] + (Alltrim(This.Value)) + [' $ Upper(Name + Value)]
			Set Filter To &lcFilter 
		Endif
		
		Goto top 
		This.Parent.Parent.oPropGrid.Refresh()
	ENDPROC

	PROCEDURE Label1.Init
		This.Caption = "Ver " + Alltrim(This.Parent.cVersion)
	ENDPROC

	PROCEDURE oleTree.Click
		*** ActiveX Control Event ***
		
	ENDPROC

	PROCEDURE oleTree.Expand
		*** ActiveX Control Event ***
		Lparameters toNode
		
		Local lnI, loObject
		
		This.Parent.LockTreeView(.T.)
		
		loObject = This.Parent.GetObjectReference(m.toNode)
		
		For lnI = 1 To m.toNode.Children
			This.Nodes.Remove(m.toNode.Child.Index)
		Next
		
		loObject = This.Parent.GetObjectReference(m.toNode)
		
		This.Parent.LoadCollectionItems(m.loObject, m.toNode)
		This.Parent.LoadChildObjects(m.loObject, m.toNode)
		This.Parent.LoadOtherObjects(m.loObject, m.toNode)
		
		
		toNode.Sorted = This.Parent.SortNode(m.loObject)
		
		This.Parent.LockTreeView(.F.)
		
		Return
		
		
		
	ENDPROC

	PROCEDURE oleTree.NodeClick
		*** ActiveX Control Event ***
		Lparameters toNode
		
		This.Parent.FillGridWithProperties(toNode)
		
	ENDPROC

	PROCEDURE oleTree.Refresh
		*** ActiveX Control Method ***
		
	ENDPROC

ENDDEFINE
